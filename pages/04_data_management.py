import streamlit as st
import pandas as pd
import numpy as np

# -----------------------------
# Page Config
# -----------------------------
st.set_page_config(page_title="Data Management", layout="wide")

st.header("ðŸ“Š Data Management & Monitoring")

st.markdown(
    """
    This section simulates **EDC (Electronic Data Capture)** integration.
    You can either **upload a CSV extract** from your EDC system
    or use **mock data** generated by the app.
    """
)

# -----------------------------
# File Upload or Mock Data
# -----------------------------
uploaded_file = st.file_uploader("ðŸ“¥ Upload EDC CSV File", type=["csv"])

if uploaded_file is not None:
    edc_df = pd.read_csv(uploaded_file)
    st.success("âœ… CSV file uploaded and loaded successfully!")
else:
    st.info("No file uploaded â€” using mock data instead.")
    if "edc_data" not in st.session_state:
        np.random.seed(42)
        st.session_state["edc_data"] = pd.DataFrame({
            "Patient ID": [f"P{i:03d}" for i in range(1, 11)],
            "Age": np.random.randint(18, 85, size=10),
            "Weight (kg)": np.random.normal(75, 15, size=10).round(1),
            "Height (cm)": np.random.normal(170, 10, size=10).round(1),
            "Dose Group": np.random.choice(["Cohort 1", "Cohort 2", "Cohort 3"], size=10),
        })
    edc_df = st.session_state["edc_data"]

st.subheader("ðŸ“¥ Current EDC Data")
st.dataframe(edc_df, use_container_width=True)

# -----------------------------
# Validation Checks
# -----------------------------
def run_validation(df: pd.DataFrame):
    issues = []

    # Check for missing values
    missing = df[df.isnull().any(axis=1)]
    for _, row in missing.iterrows():
        issues.append((row.get("Patient ID", "Unknown"), "Missing values detected"))

    # Age range check
    if "Age" in df.columns:
        invalid_age = df[(df["Age"] < 18) | (df["Age"] > 120)]
        for _, row in invalid_age.iterrows():
            issues.append((row["Patient ID"], f"Invalid age: {row['Age']}"))

    # Weight range check
    if "Weight (kg)" in df.columns:
        invalid_weight = df[(df["Weight (kg)"] < 30) | (df["Weight (kg)"] > 200)]
        for _, row in invalid_weight.iterrows():
            issues.append((row["Patient ID"], f"Out-of-range weight: {row['Weight (kg)']}"))

    # Height range check
    if "Height (cm)" in df.columns:
        invalid_height = df[(df["Height (cm)"] < 100) | (df["Height (cm)"] > 220)]
        for _, row in invalid_height.iterrows():
            issues.append((row["Patient ID"], f"Out-of-range height: {row['Height (cm)']}"))

    return pd.DataFrame(issues, columns=["Patient ID", "Validation Issue"])


st.subheader("âœ… Data Validation")
validation_results = run_validation(edc_df)

if validation_results.empty:
    st.success("All records passed validation âœ…")
else:
    st.warning("Some issues detected â›”")
    st.dataframe(validation_results, use_container_width=True)

# -----------------------------
# Monitoring Dashboard
# -----------------------------
st.subheader("ðŸ“Š Monitoring Dashboard")

total_patients = len(edc_df)
issues_found = len(validation_results)
clean_patients = total_patients - issues_found

col1, col2, col3 = st.columns(3)
col1.metric("Total Patients", total_patients)
col2.metric("Clean Records", clean_patients)
col3.metric("Issues Found", issues_found)

# Status overview by Dose Group
if "Dose Group" in edc_df.columns:
    st.subheader("ðŸ”Ž Data Quality by Cohort")
    status_by_group = edc_df.groupby("Dose Group").size().reset_index(name="Patients")
    status_by_group["Issues"] = status_by_group["Dose Group"].apply(
        lambda g: sum(validation_results["Patient ID"].isin(
            edc_df[edc_df["Dose Group"] == g]["Patient ID"]
        ))
    )
    st.dataframe(status_by_group, use_container_width=True)
